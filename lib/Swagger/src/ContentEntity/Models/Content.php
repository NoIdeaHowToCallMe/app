<?php
/**
 * Content
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\ContentEntity\Models;

use \ArrayAccess;
/**
 * Content Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Content implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'url' => 'string',
        'title' => 'string',
        'image' => 'string',
        'site_name' => 'string',
        'content_type' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'url' => 'url',
        'title' => 'title',
        'image' => 'image',
        'site_name' => 'siteName',
        'content_type' => 'contentType'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'url' => 'setUrl',
        'title' => 'setTitle',
        'image' => 'setImage',
        'site_name' => 'setSiteName',
        'content_type' => 'setContentType'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'url' => 'getUrl',
        'title' => 'getTitle',
        'image' => 'getImage',
        'site_name' => 'getSiteName',
        'content_type' => 'getContentType'
    );
  
    
    /**
      * $id 
      * @var string
      */
    protected $id;
    
    /**
      * $url 
      * @var string
      */
    protected $url;
    
    /**
      * $title 
      * @var string
      */
    protected $title;
    
    /**
      * $image 
      * @var string
      */
    protected $image;
    
    /**
      * $site_name 
      * @var string
      */
    protected $site_name;
    
    /**
      * $content_type 
      * @var string
      */
    protected $content_type;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->id = $data["id"];
            $this->url = $data["url"];
            $this->title = $data["title"];
            $this->image = $data["image"];
            $this->site_name = $data["site_name"];
            $this->content_type = $data["content_type"];
        }
    }
    
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->url;
    }
  
    /**
     * Sets url
     * @param string $url 
     * @return $this
     */
    public function setUrl($url)
    {
        
        $this->url = $url;
        return $this;
    }
    
    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
  
    /**
     * Sets title
     * @param string $title 
     * @return $this
     */
    public function setTitle($title)
    {
        
        $this->title = $title;
        return $this;
    }
    
    /**
     * Gets image
     * @return string
     */
    public function getImage()
    {
        return $this->image;
    }
  
    /**
     * Sets image
     * @param string $image 
     * @return $this
     */
    public function setImage($image)
    {
        
        $this->image = $image;
        return $this;
    }
    
    /**
     * Gets site_name
     * @return string
     */
    public function getSiteName()
    {
        return $this->site_name;
    }
  
    /**
     * Sets site_name
     * @param string $site_name 
     * @return $this
     */
    public function setSiteName($site_name)
    {
        
        $this->site_name = $site_name;
        return $this;
    }
    
    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->content_type;
    }
  
    /**
     * Sets content_type
     * @param string $content_type 
     * @return $this
     */
    public function setContentType($content_type)
    {
        
        $this->content_type = $content_type;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
